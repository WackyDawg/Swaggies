const axios = require('axios');
const User = require('../models/user');
const Wallet = require('../models/wallet')
const NotFoundError = require("../utils/errors/notfound.error");
const generateTransactionReference = require("../utils/generateTransactionReference");


const getWalletByUserId = async (userId) => {
    try {
      return await Wallet.findOne({ userId });
    } catch (error) {
      throw new Error("Internal server error");
    }
  }; 

/**
 * Make Payment with Flutterwave
 *
 * @param {Integer} amount - The amount to be paid.
 * @param {Object} user - The authenticated user object.
 * @param {String} redirect_url - The URL where the user should be redirected after payment.
 * @returns {String} - The payment link generated by Flutterwave.
 */
const makePayment = async (amount, user, redirect_url) => {
    try {
        const generatedTransactionReference = generateTransactionReference();
        const response = await axios.post("https://api.flutterwave.com/v3/payments", {
            tx_ref: `swaggies_funding_${generatedTransactionReference}`,
            amount: amount,
            currency: "NGN",
            redirect_url: redirect_url,
            customer: {
                email: user.email,
                name: user.firstname + " " + user.lastname,
            },
            customizations: {
                title: "Wallet Funding",
                logo: "http://www.piedpiper.com/app/themes/joystick-v27/images/logo.png"
            }
        }, {
            headers: {
                Authorization: `Bearer ${process.env.FLUTTERWAVE_V3_SECRET_KEY}`,
                'Content-Type': 'application/json'
            },
            configurations: {
                session_duration: 10, // Session timeout in minutes (maxValue: 1440 minutes)    
                max_retry_attempt: 5, // Max retry (int)
            }
        });
        //console.log(response)
        return response.data.data.link;
    } catch (error) {
        console.error("MakePayment Error >>", error.message);
        throw new Error(error.message);
    }
}

/**
 * Verify Payment with Flutterwave
 *
 * @param {Integer} transactionId - The ID of the transaction to verify.
 * @param {Object} user - The authenticated user object containing the JWT token.
 * @returns {Object} - The verified payment details.
 */
const verifyPayment = async (transactionId) => {
    try {
        const paymentVerification = await axios({
            method: "get",
            url: `https://api.flutterwave.com/v3/transactions/${transactionId}/verify`,
            headers: {
                Authorization: `Bearer ${process.env.FLUTTERWAVE_V3_SECRET_KEY}`,
                'Content-Type': 'application/json',
            }
        });
        //console.log("Payment Verification:", paymentVerification)
        return paymentVerification.data.data;
    } catch (error) {
        console.error("VerifyPayment Error>>", error.message);
        throw new Error(error.message);
    }
}

const makeTransfer = async (amount, account_bank, account_number, narration, beneficiary_name,) => {
    try {
        const generatedTransactionReference = generateTransactionReference();
        const response = await axios.post("https://api.flutterwave.com/v3/transfers", {
            account_bank: account_bank,
            account_number: account_number,
            amount: amount,
            narration: narration, 
            currency: "NGN",
            reference:`swaggies_disburse_${generatedTransactionReference}`,
            //debit_subaccount: '',
            callback_url: 'https://www.example.com/ng/',
            debit_currency: "NGN"
        }, {
            headers: {
                Authorization: `Bearer ${process.env.FLUTTERWAVE_V3_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data;
    } catch (error) {
        console.error("WithdrawFund Error >>", error.message);
        throw new Error(error.message);
    }
};

async function makeP2PTransfer(swag_id, amount) {
    console.log("swag id",swag_id)
    const generatedTransactionReference = generateTransactionReference();
    const recipient = await User.findOne({ swag_id }, 'swag_id first_name last_name');
    console.log("recipient", recipient);
    
    if (!recipient) {
        throw new NotFoundError(`Recipient with not found`);
    }

    const recipientWallet = await getWalletByUserId(recipient._id);
    if (!recipientWallet) {
        throw new NotFoundError("Recipient wallet Not Found");
    }

    recipientWallet.balance += amount;
    await recipientWallet.save();

    return {
        status: "successful",
        message: "Transfer Successful",
        data: { 
            reference: `swaggies_p2p_${generatedTransactionReference}`,
            swagid: `${swag_id}`
        }
    };
}


const retryTransfer = async (transactionId) => {
    try {
        const response = await axios({
            method: "get",
            url: `https://api.flutterwave.com/v3/transfers/${transactionId}/retries`,
            headers: {
                Authorization: `Bearer ${process.env.FLUTTERWAVE_V3_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data
    } catch (error) {
        console.error("Retry Transfer Error >>", error.message);
        throw new Error(error.message);
    }
};


// Get Transfer fees
const getTransferFees = async (amount) => {
    try {
        const response = await axios({
            method: "get",
            url: `https://api.flutterwave.com/v3/transfers/fee?amount=${amount}`,
            headers: {
                 Authorization: `Bearer ${process.env.FLUTTERWAVE_V3_SECRET_KEY}`,
                'Content-Type': 'application/json'
            }
        });

        return response.data
    } catch (error) {
        console.error("Get Transfer Fees Error >>", error.message);
        throw new Error(error.message);
    }
}





module.exports = { makePayment, verifyPayment, makeTransfer, makeP2PTransfer, retryTransfer, getTransferFees };
